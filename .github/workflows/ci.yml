name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Linting (ruff)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11.7
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.7'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ruff-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-ruff-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run ruff linting
        run: ruff check .

      - name: Run ruff formatting check
        run: ruff format --check .

  type-check:
    name: Type Checking (mypy)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11.7
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.7'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-mypy-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-mypy-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mypy types-jsonschema

      - name: Run mypy
        run: mypy src/

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11.7
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.7'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-tests-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-tests-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: pytest tests/unit/ --cov=src --cov-report=term --cov-report=xml --cov-fail-under=70 -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Upload test results on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: unit-test-results
          path: |
            coverage.xml
            .coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: unit-tests  # Run integration tests only if unit tests pass
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11.7
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.7'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-integration-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install uv (provides uvx for mcp-linkedin)
        run: pip install uv

      - name: Install Node.js for MCP servers
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          echo "Claude Code CLI installed"

      - name: Setup MCP mocking for CI
        run: |
          echo "CI environment detected - integration tests will use mocked MCP servers"
          echo "No actual MCP server installation required"
          echo "uvx installed for LinkedIn MCP server testing"

      - name: Run integration tests
        run: pytest tests/integration/ -v --no-cov
        env:
          CI: true  # Flag to enable MCP mocking in tests
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CLAUDE_CODE_ACTION: bypassPermissions
          DISABLE_TELEMETRY: true
          FORCE_CODE_TERMINAL: true

      - name: Upload test results on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: integration-test-results
          path: pytest-logs/
