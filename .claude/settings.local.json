{
  "permissions": {
    "allow": [
      "Bash(dir C:UsersyifeiDocumentsResearchdocs)",
      "Bash(md-tree explode:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(python3.11:*)",
      "Bash(py:*)",
      "Bash(venv/Scripts/python.exe:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(venv/Scripts/pip-compile:*)",
      "Bash(mv:*)",
      "Bash(dir:*)",
      "Bash(if not exist \"C:\\Users\\yifei\\Documents\\Research\\docs\\qa\\gates\" mkdir \"C:\\Users\\yifei\\Documents\\Research\\docs\\qa\\gates\")",
      "Bash(findstr:*)",
      "Bash(for:*)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(venvScriptspython.exe -m pytest tests/unit/test_validator.py -v --tb=short)",
      "Bash(venvScriptspython.exe -m pytest tests/unit/test_credential_manager.py -v --tb=short)",
      "Bash(ruff check:*)",
      "Bash(venvScriptspython.exe -m mypy:*)",
      "Bash(venvScriptspython.exe -m ruff check src/utils/ tests/unit/test_checkpoint_manager.py tests/unit/test_llm_helpers.py tests/unit/test_progress_tracker.py tests/unit/test_logger.py)",
      "Bash(npm --version)",
      "Bash(npm install:*)",
      "WebSearch",
      "WebFetch(domain:github.com)",
      "Bash(uv:*)",
      "Bash(pip install:*)",
      "Bash(npm search:*)",
      "Bash(uvx:*)",
      "Bash(venv\\Scripts\\pip-compile:*)",
      "Bash(venv/Scripts/pip install:*)",
      "Read(//c/**)",
      "Bash(git checkout:*)",
      "Bash(md-tree:*)",
      "Bash(test -d tests)",
      "Bash(venv/Scripts/pip list:*)",
      "Bash(test:*)",
      "Bash(do if [ -f \"docs/stories/$file\" ])",
      "Bash(venvScriptspython.exe -m pytest tests/unit/test_example.py tests/integration/test_example_integration.py -v --tb=short)",
      "Bash(venv\\Scripts\\python.exe -m ruff check:*)",
      "Bash(venvScriptspython.exe -m pytest tests/unit/test_profile_consolidator.py -v --tb=short)",
      "Bash(if not exist \".github\\workflows\" mkdir \".github\\workflows\")",
      "Bash(CI=true venv/Scripts/python.exe -m pytest tests/integration/ -v)",
      "Bash(git push:*)",
      "Bash(ruff format:*)",
      "Bash(CI=true venv/Scripts/python.exe -m pytest tests/integration/ -v --no-cov)",
      "Bash(pip show:*)",
      "Bash(venv/Scripts/ruff check:*)",
      "Bash(timeout:*)",
      "Bash(venv/Scripts/ruff format:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(if not exist \"docs\\qa\\gates\" mkdir \"docs\\qa\\gates\")",
      "WebFetch(domain:gist.github.com)",
      "Bash(venvScriptsruff.exe format:*)",
      "Bash(if not exist \"docs\\qa\\assessments\" mkdir \"docs\\qa\\assessments\")",
      "Bash(venv\\Scripts\\python.exe:*)",
      "Bash(del \"C:\\Users\\yifei\\Documents\\Research\\src\\utils\\web_scraper.py\")",
      "Bash(python -c \"import os; os.remove(''src/utils/web_scraper.py'')\")",
      "Bash(venv/Scripts/ruff.exe check:*)",
      "Bash(venvScriptspython.exe -m pytest tests/unit/test_department_filter.py -v --tb=short)",
      "WebFetch(domain:anthropic.mintlify.app)",
      "mcp__sequential__sequentialthinking",
      "Bash(del CLAUDE-SDK-SOLUTION.md)",
      "Bash(if [ -f \"INTEGRATION_TEST_RESULTS.md\" ])",
      "Bash(then echo \"EXISTS\")",
      "Bash(else echo \"NOT_FOUND\")",
      "Bash(venv/Scripts/ruff.exe format:*)",
      "Bash(venvScriptspython.exe -m pytest tests/unit/test_batch_processing.py -v --tb=short)",
      "Bash(python:*)",
      "Bash(cat:*)",
      "Bash(CI=true venv/Scripts/python.exe -m pytest tests/integration/test_llm_integration.py -v)",
      "Bash(venv\\Scripts\\ruff.exe check:*)",
      "Bash(venvScriptspython.exe -m pytest tests/integration/test_professor_discovery.py::test_deduplication_fuzzy_matching tests/integration/test_professor_discovery.py::test_rate_limiting_delays_requests tests/integration/test_professor_discovery.py::test_save_professors_checkpoint tests/integration/test_professor_discovery.py::test_exact_duplicate_skips_llm tests/integration/test_professor_discovery.py::test_merge_professor_records tests/integration/test_professor_discovery.py::test_high_confidence_no_match_not_treated_as_duplicate tests/integration/test_professor_discovery.py::test_discover_and_save_professors_orchestrator -v --tb=short)",
      "Bash(if [ -d \"tests/unit\" ])",
      "Bash(then ls tests/unit/*.py)",
      "Bash(else echo \"Directory not found\")",
      "Bash(venvScriptspython.exe -m pytest tests/unit/test_contact_extraction.py -v --tb=short)",
      "Bash(del srcagentsprofessor_filter.py)",
      "Bash(if not exist \"claude\" mkdir \"claude\")",
      "Bash(if not exist \"claude\\.claude\" mkdir \"claude\\.claude\")",
      "Bash(git clone:*)",
      "Bash(git log:*)",
      "Bash(venv/Scripts/pip uninstall:*)",
      "Bash(npx:*)",
      "Bash(node:*)",
      "Bash(find:*)",
      "Bash(venv/Scripts/pip.exe list:*)",
      "Bash(where playwright-mcp)",
      "WebFetch(domain:pypi.org)",
      "WebFetch(domain:medium.com)",
      "Bash(if not exist \"prompts\\base\" mkdir \"prompts\\base\")",
      "Bash(if not exist \"prompts\\department\" mkdir \"prompts\\department\")",
      "Bash(if not exist \"prompts\\professor\" mkdir \"prompts\\professor\")",
      "Bash(if not exist \"prompts\\lab\" mkdir \"prompts\\lab\")",
      "Bash(if not exist \"prompts\\publication\" mkdir \"prompts\\publication\")",
      "Bash(if not exist \"prompts\\linkedin\" mkdir \"prompts\\linkedin\")",
      "WebFetch(domain:www.anthropic.com)",
      "Bash(git tag:*)"
    ],
    "deny": [],
    "ask": []
  }
}
